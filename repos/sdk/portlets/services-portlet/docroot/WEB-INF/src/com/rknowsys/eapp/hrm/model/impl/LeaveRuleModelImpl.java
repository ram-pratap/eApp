/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.rknowsys.eapp.hrm.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.rknowsys.eapp.hrm.model.LeaveRule;
import com.rknowsys.eapp.hrm.model.LeaveRuleModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LeaveRule service. Represents a row in the &quot;leave_rule&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.rknowsys.eapp.hrm.model.LeaveRuleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LeaveRuleImpl}.
 * </p>
 *
 * @author rknowsys
 * @see LeaveRuleImpl
 * @see com.rknowsys.eapp.hrm.model.LeaveRule
 * @see com.rknowsys.eapp.hrm.model.LeaveRuleModel
 * @generated
 */
public class LeaveRuleModelImpl extends BaseModelImpl<LeaveRule>
	implements LeaveRuleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a leave rule model instance should use the {@link com.rknowsys.eapp.hrm.model.LeaveRule} interface instead.
	 */
	public static final String TABLE_NAME = "leave_rule";
	public static final Object[][] TABLE_COLUMNS = {
			{ "leaveRuleId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "userId", Types.BIGINT },
			{ "leaveTypeId", Types.BIGINT },
			{ "leavePeriodTypeId", Types.INTEGER },
			{ "startMonth", Types.INTEGER },
			{ "startDayOfMonth", Types.INTEGER },
			{ "duration", Types.VARCHAR },
			{ "ifEmployeesCanApply", Types.BOOLEAN },
			{ "ifAdminCanAssign", Types.BOOLEAN },
			{ "ifAdminCanManageEntitlements", Types.BOOLEAN },
			{ "ifLeaveAccruable", Types.BOOLEAN },
			{ "ifCarryForwardable", Types.BOOLEAN }
		};
	public static final String TABLE_SQL_CREATE = "create table leave_rule (leaveRuleId LONG not null primary key,companyId LONG,groupId LONG,createDate DATE null,modifiedDate DATE null,userId LONG,leaveTypeId LONG,leavePeriodTypeId INTEGER,startMonth INTEGER,startDayOfMonth INTEGER,duration VARCHAR(75) null,ifEmployeesCanApply BOOLEAN,ifAdminCanAssign BOOLEAN,ifAdminCanManageEntitlements BOOLEAN,ifLeaveAccruable BOOLEAN,ifCarryForwardable BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table leave_rule";
	public static final String ORDER_BY_JPQL = " ORDER BY leaveRule.leaveRuleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY leave_rule.leaveRuleId ASC";
	public static final String DATA_SOURCE = "hrmDataSource";
	public static final String SESSION_FACTORY = "hrmSessionFactory";
	public static final String TX_MANAGER = "hrmTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.rknowsys.eapp.hrm.model.LeaveRule"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.rknowsys.eapp.hrm.model.LeaveRule"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.rknowsys.eapp.hrm.model.LeaveRule"),
			true);
	public static long GROUPID_COLUMN_BITMASK = 1L;
	public static long LEAVETYPEID_COLUMN_BITMASK = 2L;
	public static long LEAVERULEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.rknowsys.eapp.hrm.model.LeaveRule"));

	public LeaveRuleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _leaveRuleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setLeaveRuleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _leaveRuleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LeaveRule.class;
	}

	@Override
	public String getModelClassName() {
		return LeaveRule.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("leaveRuleId", getLeaveRuleId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("userId", getUserId());
		attributes.put("leaveTypeId", getLeaveTypeId());
		attributes.put("leavePeriodTypeId", getLeavePeriodTypeId());
		attributes.put("startMonth", getStartMonth());
		attributes.put("startDayOfMonth", getStartDayOfMonth());
		attributes.put("duration", getDuration());
		attributes.put("ifEmployeesCanApply", getIfEmployeesCanApply());
		attributes.put("ifAdminCanAssign", getIfAdminCanAssign());
		attributes.put("ifAdminCanManageEntitlements",
			getIfAdminCanManageEntitlements());
		attributes.put("ifLeaveAccruable", getIfLeaveAccruable());
		attributes.put("ifCarryForwardable", getIfCarryForwardable());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long leaveRuleId = (Long)attributes.get("leaveRuleId");

		if (leaveRuleId != null) {
			setLeaveRuleId(leaveRuleId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Long leaveTypeId = (Long)attributes.get("leaveTypeId");

		if (leaveTypeId != null) {
			setLeaveTypeId(leaveTypeId);
		}

		Integer leavePeriodTypeId = (Integer)attributes.get("leavePeriodTypeId");

		if (leavePeriodTypeId != null) {
			setLeavePeriodTypeId(leavePeriodTypeId);
		}

		Integer startMonth = (Integer)attributes.get("startMonth");

		if (startMonth != null) {
			setStartMonth(startMonth);
		}

		Integer startDayOfMonth = (Integer)attributes.get("startDayOfMonth");

		if (startDayOfMonth != null) {
			setStartDayOfMonth(startDayOfMonth);
		}

		String duration = (String)attributes.get("duration");

		if (duration != null) {
			setDuration(duration);
		}

		Boolean ifEmployeesCanApply = (Boolean)attributes.get(
				"ifEmployeesCanApply");

		if (ifEmployeesCanApply != null) {
			setIfEmployeesCanApply(ifEmployeesCanApply);
		}

		Boolean ifAdminCanAssign = (Boolean)attributes.get("ifAdminCanAssign");

		if (ifAdminCanAssign != null) {
			setIfAdminCanAssign(ifAdminCanAssign);
		}

		Boolean ifAdminCanManageEntitlements = (Boolean)attributes.get(
				"ifAdminCanManageEntitlements");

		if (ifAdminCanManageEntitlements != null) {
			setIfAdminCanManageEntitlements(ifAdminCanManageEntitlements);
		}

		Boolean ifLeaveAccruable = (Boolean)attributes.get("ifLeaveAccruable");

		if (ifLeaveAccruable != null) {
			setIfLeaveAccruable(ifLeaveAccruable);
		}

		Boolean ifCarryForwardable = (Boolean)attributes.get(
				"ifCarryForwardable");

		if (ifCarryForwardable != null) {
			setIfCarryForwardable(ifCarryForwardable);
		}
	}

	@Override
	public long getLeaveRuleId() {
		return _leaveRuleId;
	}

	@Override
	public void setLeaveRuleId(long leaveRuleId) {
		_leaveRuleId = leaveRuleId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@Override
	public long getLeaveTypeId() {
		return _leaveTypeId;
	}

	@Override
	public void setLeaveTypeId(long leaveTypeId) {
		_columnBitmask |= LEAVETYPEID_COLUMN_BITMASK;

		if (!_setOriginalLeaveTypeId) {
			_setOriginalLeaveTypeId = true;

			_originalLeaveTypeId = _leaveTypeId;
		}

		_leaveTypeId = leaveTypeId;
	}

	public long getOriginalLeaveTypeId() {
		return _originalLeaveTypeId;
	}

	@Override
	public int getLeavePeriodTypeId() {
		return _leavePeriodTypeId;
	}

	@Override
	public void setLeavePeriodTypeId(int leavePeriodTypeId) {
		_leavePeriodTypeId = leavePeriodTypeId;
	}

	@Override
	public int getStartMonth() {
		return _startMonth;
	}

	@Override
	public void setStartMonth(int startMonth) {
		_startMonth = startMonth;
	}

	@Override
	public int getStartDayOfMonth() {
		return _startDayOfMonth;
	}

	@Override
	public void setStartDayOfMonth(int startDayOfMonth) {
		_startDayOfMonth = startDayOfMonth;
	}

	@Override
	public String getDuration() {
		if (_duration == null) {
			return StringPool.BLANK;
		}
		else {
			return _duration;
		}
	}

	@Override
	public void setDuration(String duration) {
		_duration = duration;
	}

	@Override
	public boolean getIfEmployeesCanApply() {
		return _ifEmployeesCanApply;
	}

	@Override
	public boolean isIfEmployeesCanApply() {
		return _ifEmployeesCanApply;
	}

	@Override
	public void setIfEmployeesCanApply(boolean ifEmployeesCanApply) {
		_ifEmployeesCanApply = ifEmployeesCanApply;
	}

	@Override
	public boolean getIfAdminCanAssign() {
		return _ifAdminCanAssign;
	}

	@Override
	public boolean isIfAdminCanAssign() {
		return _ifAdminCanAssign;
	}

	@Override
	public void setIfAdminCanAssign(boolean ifAdminCanAssign) {
		_ifAdminCanAssign = ifAdminCanAssign;
	}

	@Override
	public boolean getIfAdminCanManageEntitlements() {
		return _ifAdminCanManageEntitlements;
	}

	@Override
	public boolean isIfAdminCanManageEntitlements() {
		return _ifAdminCanManageEntitlements;
	}

	@Override
	public void setIfAdminCanManageEntitlements(
		boolean ifAdminCanManageEntitlements) {
		_ifAdminCanManageEntitlements = ifAdminCanManageEntitlements;
	}

	@Override
	public boolean getIfLeaveAccruable() {
		return _ifLeaveAccruable;
	}

	@Override
	public boolean isIfLeaveAccruable() {
		return _ifLeaveAccruable;
	}

	@Override
	public void setIfLeaveAccruable(boolean ifLeaveAccruable) {
		_ifLeaveAccruable = ifLeaveAccruable;
	}

	@Override
	public boolean getIfCarryForwardable() {
		return _ifCarryForwardable;
	}

	@Override
	public boolean isIfCarryForwardable() {
		return _ifCarryForwardable;
	}

	@Override
	public void setIfCarryForwardable(boolean ifCarryForwardable) {
		_ifCarryForwardable = ifCarryForwardable;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			LeaveRule.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LeaveRule toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LeaveRule)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LeaveRuleImpl leaveRuleImpl = new LeaveRuleImpl();

		leaveRuleImpl.setLeaveRuleId(getLeaveRuleId());
		leaveRuleImpl.setCompanyId(getCompanyId());
		leaveRuleImpl.setGroupId(getGroupId());
		leaveRuleImpl.setCreateDate(getCreateDate());
		leaveRuleImpl.setModifiedDate(getModifiedDate());
		leaveRuleImpl.setUserId(getUserId());
		leaveRuleImpl.setLeaveTypeId(getLeaveTypeId());
		leaveRuleImpl.setLeavePeriodTypeId(getLeavePeriodTypeId());
		leaveRuleImpl.setStartMonth(getStartMonth());
		leaveRuleImpl.setStartDayOfMonth(getStartDayOfMonth());
		leaveRuleImpl.setDuration(getDuration());
		leaveRuleImpl.setIfEmployeesCanApply(getIfEmployeesCanApply());
		leaveRuleImpl.setIfAdminCanAssign(getIfAdminCanAssign());
		leaveRuleImpl.setIfAdminCanManageEntitlements(getIfAdminCanManageEntitlements());
		leaveRuleImpl.setIfLeaveAccruable(getIfLeaveAccruable());
		leaveRuleImpl.setIfCarryForwardable(getIfCarryForwardable());

		leaveRuleImpl.resetOriginalValues();

		return leaveRuleImpl;
	}

	@Override
	public int compareTo(LeaveRule leaveRule) {
		long primaryKey = leaveRule.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LeaveRule)) {
			return false;
		}

		LeaveRule leaveRule = (LeaveRule)obj;

		long primaryKey = leaveRule.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		LeaveRuleModelImpl leaveRuleModelImpl = this;

		leaveRuleModelImpl._originalGroupId = leaveRuleModelImpl._groupId;

		leaveRuleModelImpl._setOriginalGroupId = false;

		leaveRuleModelImpl._originalLeaveTypeId = leaveRuleModelImpl._leaveTypeId;

		leaveRuleModelImpl._setOriginalLeaveTypeId = false;

		leaveRuleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LeaveRule> toCacheModel() {
		LeaveRuleCacheModel leaveRuleCacheModel = new LeaveRuleCacheModel();

		leaveRuleCacheModel.leaveRuleId = getLeaveRuleId();

		leaveRuleCacheModel.companyId = getCompanyId();

		leaveRuleCacheModel.groupId = getGroupId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			leaveRuleCacheModel.createDate = createDate.getTime();
		}
		else {
			leaveRuleCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			leaveRuleCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			leaveRuleCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		leaveRuleCacheModel.userId = getUserId();

		leaveRuleCacheModel.leaveTypeId = getLeaveTypeId();

		leaveRuleCacheModel.leavePeriodTypeId = getLeavePeriodTypeId();

		leaveRuleCacheModel.startMonth = getStartMonth();

		leaveRuleCacheModel.startDayOfMonth = getStartDayOfMonth();

		leaveRuleCacheModel.duration = getDuration();

		String duration = leaveRuleCacheModel.duration;

		if ((duration != null) && (duration.length() == 0)) {
			leaveRuleCacheModel.duration = null;
		}

		leaveRuleCacheModel.ifEmployeesCanApply = getIfEmployeesCanApply();

		leaveRuleCacheModel.ifAdminCanAssign = getIfAdminCanAssign();

		leaveRuleCacheModel.ifAdminCanManageEntitlements = getIfAdminCanManageEntitlements();

		leaveRuleCacheModel.ifLeaveAccruable = getIfLeaveAccruable();

		leaveRuleCacheModel.ifCarryForwardable = getIfCarryForwardable();

		return leaveRuleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(33);

		sb.append("{leaveRuleId=");
		sb.append(getLeaveRuleId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", leaveTypeId=");
		sb.append(getLeaveTypeId());
		sb.append(", leavePeriodTypeId=");
		sb.append(getLeavePeriodTypeId());
		sb.append(", startMonth=");
		sb.append(getStartMonth());
		sb.append(", startDayOfMonth=");
		sb.append(getStartDayOfMonth());
		sb.append(", duration=");
		sb.append(getDuration());
		sb.append(", ifEmployeesCanApply=");
		sb.append(getIfEmployeesCanApply());
		sb.append(", ifAdminCanAssign=");
		sb.append(getIfAdminCanAssign());
		sb.append(", ifAdminCanManageEntitlements=");
		sb.append(getIfAdminCanManageEntitlements());
		sb.append(", ifLeaveAccruable=");
		sb.append(getIfLeaveAccruable());
		sb.append(", ifCarryForwardable=");
		sb.append(getIfCarryForwardable());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(52);

		sb.append("<model><model-name>");
		sb.append("com.rknowsys.eapp.hrm.model.LeaveRule");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>leaveRuleId</column-name><column-value><![CDATA[");
		sb.append(getLeaveRuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeaveTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leavePeriodTypeId</column-name><column-value><![CDATA[");
		sb.append(getLeavePeriodTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startMonth</column-name><column-value><![CDATA[");
		sb.append(getStartMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>startDayOfMonth</column-name><column-value><![CDATA[");
		sb.append(getStartDayOfMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>duration</column-name><column-value><![CDATA[");
		sb.append(getDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifEmployeesCanApply</column-name><column-value><![CDATA[");
		sb.append(getIfEmployeesCanApply());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifAdminCanAssign</column-name><column-value><![CDATA[");
		sb.append(getIfAdminCanAssign());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifAdminCanManageEntitlements</column-name><column-value><![CDATA[");
		sb.append(getIfAdminCanManageEntitlements());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifLeaveAccruable</column-name><column-value><![CDATA[");
		sb.append(getIfLeaveAccruable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ifCarryForwardable</column-name><column-value><![CDATA[");
		sb.append(getIfCarryForwardable());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = LeaveRule.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			LeaveRule.class
		};
	private long _leaveRuleId;
	private long _companyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private Date _createDate;
	private Date _modifiedDate;
	private long _userId;
	private String _userUuid;
	private long _leaveTypeId;
	private long _originalLeaveTypeId;
	private boolean _setOriginalLeaveTypeId;
	private int _leavePeriodTypeId;
	private int _startMonth;
	private int _startDayOfMonth;
	private String _duration;
	private boolean _ifEmployeesCanApply;
	private boolean _ifAdminCanAssign;
	private boolean _ifAdminCanManageEntitlements;
	private boolean _ifLeaveAccruable;
	private boolean _ifCarryForwardable;
	private long _columnBitmask;
	private LeaveRule _escapedModel;
}